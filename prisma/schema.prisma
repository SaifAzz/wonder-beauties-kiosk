// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  phone         String   @unique
  password      String
  country       String   // "Iraq" or "Syria"
  role          Role     @default(USER)
  balance       Float    @default(0)
  outstandingDebt Float  @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isVerified    Boolean  @default(true)
  cart          Cart?
  orders        Order[]
}

enum Role {
  ADMIN
  USER
}

model Product {
  id              String    @id @default(cuid())
  name            String
  description     String?
  price           Float
  quantity        Int
  country         String    // "Iraq" or "Syria"
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  cartItems       CartItem[]
  orderItems      OrderItem[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]
  total       Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int
  price       Float    // Price at the time of purchase
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PENDING_PAYMENT
  COMPLETED
  CANCELLED
}

model PettyCash {
  id            String   @id @default(cuid())
  amount        Float
  description   String
  type          String   // "INCOME", "EXPENSE", or "PENDING_INCOME"
  relatedOrderId String? // Optional reference to an order
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
